
// Prisma schema for Community Portal Pro
// Run: npx prisma generate && npx prisma migrate dev --name init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProfileType {
  INDIVIDUAL
  BUSINESS
}

enum ListingStatus {
  PENDING
  PUBLISHED
  REJECTED
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  listings      Listing[]
  events        Event[]
  reviews       Review[]
  subscriptions Subscription[]
  leads         Lead[]    @relation("LeadToUser")
}

model Profile {
  id          String      @id @default(cuid())
  userId      String      @unique
  user        User        @relation(fields: [userId], references: [id])
  type        ProfileType
  displayName String
  bio         String?
  website     String?
  phone       String?
  location    String?
  plan        String      @default("free") // free|pro|business_plus
  verifiedAt  DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Listing {
  id         String        @id @default(cuid())
  ownerId    String
  owner      User          @relation(fields: [ownerId], references: [id])
  title      String
  slug       String        @unique
  summary    String
  content    String
  category   String
  isFeatured Boolean       @default(false)
  status     ListingStatus @default(PUBLISHED)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  reviews    Review[]
  coupons    Coupon[]
  leads      Lead[]        @relation("LeadToListing")
  sponsored  SponsoredPlacement[]
}

model Event {
  id          String   @id @default(cuid())
  hostId      String
  host        User     @relation(fields: [hostId], references: [id])
  title       String
  description String
  startsAt    DateTime
  endsAt      DateTime
  location    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tickets     TicketType[]
  orders      Order[]
}

model Review {
  id        String   @id @default(cuid())
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  listingId String
  listing   Listing  @relation(fields: [listingId], references: [id])
  rating    Int
  comment   String
  createdAt DateTime @default(now())
}

model Lead {
  id         String   @id @default(cuid())
  listingId  String
  listing    Listing  @relation("LeadToListing", fields: [listingId], references: [id])
  fromUserId String?
  fromUser   User?    @relation("LeadToUser", fields: [fromUserId], references: [id])
  name       String
  email      String
  message    String
  createdAt  DateTime @default(now())
}

model Coupon {
  id         String   @id @default(cuid())
  listingId  String
  listing    Listing  @relation(fields: [listingId], references: [id])
  code       String   @unique
  title      String
  description String?
  startsAt   DateTime
  endsAt     DateTime
  redemptions Int     @default(0)
}

model Subscription {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  plan       String   // free|pro|business_plus
  status     String   // active|past_due|canceled
  provider   String   // stripe
  externalId String?  // customer/sub id
  startedAt  DateTime @default(now())
  endsAt     DateTime?
}

model SponsoredPlacement {
  id        String   @id @default(cuid())
  listingId String
  listing   Listing  @relation(fields: [listingId], references: [id])
  location  String   // home:hero, category:top, newsletter:slot1
  startsAt  DateTime
  endsAt    DateTime
}

model TicketType {
  id         String   @id @default(cuid())
  eventId    String
  event      Event    @relation(fields: [eventId], references: [id])
  name       String
  pricePence Int
  quantity   Int
}

model Order {
  id          String   @id @default(cuid())
  eventId     String
  event       Event    @relation(fields: [eventId], references: [id])
  email       String
  totalPence  Int
  createdAt   DateTime @default(now())
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
